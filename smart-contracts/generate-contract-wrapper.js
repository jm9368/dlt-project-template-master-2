// Smart contract wrapper code generator

"use strict";

const FS = require("fs");
const Path = require("path");

function main() {
    const contractName = ((process.argv[2] || "") + "").replace(/\s\t/g, "_");

    const artifactPath = Path.resolve(__dirname, "build", "contracts", contractName + ".json");

    if (!FS.existsSync(artifactPath)) {
        console.log(`Error: Contract ${contractName} not found in build/contracts. Make sure you have compiled the contracts first`);
        process.exit(1);
    }

    const contractData = JSON.parse(FS.readFileSync(artifactPath));

    const wrapperCode = generateWrapper(contractName, contractData.abi, { dev: contractData.devdoc || Object.create(null), user: contractData.userdoc || Object.create(null) });
    const byteCodeConstCode = generateByteCodeConst(contractName, contractData.bytecode);

    const wrappersPath = Path.resolve(__dirname, "wrappers");

    try {
        FS.mkdirSync(wrappersPath);
    } catch (ex) { }

    const wrapperFile = Path.resolve(wrappersPath, toTypescriptFileName(contractName) + ".ts");
    FS.writeFileSync(wrapperFile, wrapperCode);
    console.log(`Generated wrapper for contract ${contractName} | Saved into file: ${wrapperFile}`);

    const byteCodeFile = Path.resolve(wrappersPath, toTypescriptFileName(contractName) + "-bytecode.ts");
    FS.writeFileSync(byteCodeFile, byteCodeConstCode);
    console.log(`Generated bytecode const for contract ${contractName} Saved into file: ${byteCodeFile}`);
}

function generateByteCodeConst(className, bytecode) {
    const parsedByteCode = Buffer.from(bytecode.substring(2), "hex");

    let lines = [];

    lines.push('// ' + className + ' contract bytecode');

    lines.push('');

    lines.push('"use strict";');

    lines.push('');

    lines.push('/**');
    lines.push(' * ' + className + ' contract bytecode');
    lines.push(' */');
    lines.push('export const ' + className + 'ByteCode = Buffer.from("' + parsedByteCode.toString("base64") + '", "base64");');

    return lines.join("\n") + "\n";
}

function generateWrapper(className, abi, docs) {
    let result = {
        imports: {},

        deployFn: "",

        viewFn: [],
        txFn: [],

        eventFn: [],
        eventStruct: [],
        eventTypes: [],
    };

    let wrapperName = className + "Wrapper";

    let overloadedMethods = Object.create(null);
    let overloadedMethodsIndex = Object.create(null);
    let methodSet = Object.create(null);

    for (let i = 0; i < abi.length; i++) {
        let entry = abi[i];

        if (entry.type === "function") {
            if (methodSet[entry.name]) {
                overloadedMethods[entry.name] = true;
                overloadedMethodsIndex[entry.name] = 0;
            }
            methodSet[entry.name] = true;
        }
    }

    for (let i = 0; i < abi.length; i++) {
        let entry = abi[i];

        if (entry.type === "constructor") {
            result.deployFn = makeDeployFunction(entry, result, wrapperName, "    ", docs);
        } else if (entry.type === "function") {
            if (entry.stateMutability === "view" || entry.stateMutability === "pure") {
                result.viewFn.push(makeViewFunction(entry, result, "    ", overloadedMethods[entry.name], overloadedMethodsIndex, docs));
            } else {
                result.txFn.push(makeTransactionFunction(entry, result, "    ", className, overloadedMethods[entry.name], overloadedMethodsIndex, docs));
            }
        } else if (entry.type === "event") {
            result.eventTypes.push(entry.name);
            result.eventStruct.push(makeEventStruct(entry, result, "", docs));
            result.eventFn.push(makeEventFunc(entry, result, "    ", docs));
        }
    }

    result.imports["SmartContractInterface"] = true;
    result.imports["TransactionBuildDetails"] = true;
    result.imports["AddressLike"] = true;
    result.imports["Address"] = true;
    result.imports["QuantityLike"] = true;
    result.imports["BlockTag"] = true;
    result.imports["RPCOptions"] = true;
    result.imports["ABILike"] = true;
    result.imports["SmartContractEvent"] = true;

    let lines = [];

    lines.push('// ' + className + ' contract wrapper');

    lines.push('');

    lines.push('"use strict";');

    lines.push('');

    lines.push('import { ' + Object.keys(result.imports).join(", ") + ' } from "@asanrom/smart-contract-wrapper";');

    lines.push('');

    lines.push('/**');

    const contractDescriptionLines = (docs.user.notice || ("Contract wrapper: " + className)).split("\n");

    for (let l of contractDescriptionLines) {
        lines.push(' * ' + l);
    }

    lines.push(' */');

    lines.push('export class ' + wrapperName + ' {');

    lines.push('    /**');
    lines.push('     * Address of the smart contract');
    lines.push('     */');
    lines.push('    public address: Address;');
    lines.push('');
    lines.push('    private _contractInterface: SmartContractInterface;');

    lines.push('');

    lines.push(result.deployFn);

    lines.push('');

    lines.push('    /**');
    lines.push('     * Wrapper constructor');
    lines.push('     * @param address Address of the smart contract');
    lines.push('     * @param rpcOptions Options to connect to the blockchain');
    lines.push('     */');

    lines.push('    constructor(address: AddressLike, rpcOptions: RPCOptions) {');
    lines.push('        this._contractInterface = new SmartContractInterface(address, CONTRACT_ABI, rpcOptions);');
    lines.push('        this.address = this._contractInterface.address;');
    lines.push('    }');

    for (let i = 0; i < result.viewFn.length; i++) {
        lines.push('');
        lines.push(result.viewFn[i]);
    }

    for (let i = 0; i < result.txFn.length; i++) {
        lines.push('');
        lines.push(result.txFn[i]);
    }


    lines.push('');

    lines.push('    /**');
    lines.push('     * Finds events sent by the smart contract');
    lines.push('     * @param fromBlock Beginning of the block range');
    lines.push('     * @param toBlock Ending of the block range');
    lines.push('     * @returns A connection of events');
    lines.push('     */');

    lines.push('    public async findEvents(fromBlock: QuantityLike | BlockTag, toBlock: QuantityLike | BlockTag): Promise<' + className + 'EventCollection> {');
    lines.push('        const events = await this._contractInterface.findEvents(fromBlock, toBlock);');
    lines.push('        return new ' + className + 'EventCollection(events);');
    lines.push('    }');

    lines.push('}');

    lines.push('');

    lines.push('/**');
    lines.push(' * Possible event types for contract: ' + className);
    lines.push(' */');
    lines.push('export type ' + className + "EventType = " + (result.eventTypes.map(function (t) {
        return JSON.stringify(t);
    }).join(" | ") || '"string"') + ';');

    lines.push('');


    lines.push('/**');
    lines.push(' * Collection of events for contract: ' + className);
    lines.push(' */');
    lines.push('export class ' + className + "EventCollection" + " {");

    lines.push('    /**');
    lines.push('     * Array of events');
    lines.push('     */');
    lines.push('    public events: SmartContractEvent[];');

    lines.push('');

    lines.push('    /**');
    lines.push('     * Event collection constructor');
    lines.push('     * @param events Array of events');
    lines.push('     */');
    lines.push('    constructor(events: SmartContractEvent[]) {');
    lines.push('        this.events = events;');
    lines.push('    }');

    lines.push('');

    lines.push('    /**');
    lines.push('     * Gets the number of events in the collection');
    lines.push('     * @returns The event count');
    lines.push('     */');
    lines.push('    public length(): number {');
    lines.push('        return this.events.length');
    lines.push('    }');

    lines.push('');

    lines.push('    /**');
    lines.push('     * Gets the event type given the index');
    lines.push('     * @param index Event index in the collection (from 0 to length - 1)');
    lines.push('     * @returns The event type');
    lines.push('     */');
    lines.push('    public getEventType(index: number): ' + className + 'EventType {');
    lines.push('        return <any>this.events[index].name');
    lines.push('    }');

    lines.push('');

    lines.push('    /**');
    lines.push('     * Filters the collection by event type');
    lines.push('     * @param eventType The event type');
    lines.push('     * @returns A collection containing only the event of the specified type');
    lines.push('     */');
    lines.push('    public filter(eventType: ' + className + 'EventType): ' + className + 'EventCollection {');
    lines.push('        return new ' + className + 'EventCollection(this.events.filter(event => event.name === eventType));');
    lines.push('    }');

    for (let i = 0; i < result.eventFn.length; i++) {
        lines.push('');
        lines.push(result.eventFn[i]);
    }


    lines.push('}');

    for (let i = 0; i < result.eventStruct.length; i++) {
        lines.push('');
        lines.push(result.eventStruct[i]);
    }

    lines.push('');

    lines.push('const CONTRACT_ABI: ABILike = ' + JSON.stringify(abi, null, "    ") + ";");

    return lines.join("\n") + "\n";
}

function makeDeployFunction(entry, result, className, tabSpaces, docs) {
    let lines = [];

    let params = makeFunctionParams(entry.inputs, result);

    if (entry.payable) {
        result.imports["QuantityLike"] = true;
        params.push('value: QuantityLike');
    }

    result.imports["BytesLike"] = true;
    params.push('bytecode: BytesLike');

    result.imports["TransactionSendingOptions"] = true;
    params.push('options: TransactionSendingOptions');

    result.imports["deploySmartContract"] = true;

    const paramDoc = ((docs.dev.methods || Object.create(null)).constructor || Object.create(null)).params || Object.create(null);

    lines.push('/**');

    lines.push(' * Deploys the smart contract');

    for (let p of params) {
        let pName = p.split(":")[0];
        switch (pName) {
            case 'value':
                if (entry.payable) {
                    lines.push(' * @param value The transaction value');
                } else {
                    lines.push(' * @param value ' + (paramDoc[pName] || pName));
                }
                break;
            case 'bytecode':
                lines.push(' * @param bytecode The smart contract bytecode');
                break;
            case 'options':
                lines.push(' * @param options The options for sending the transaction');
                break;
            default:
                lines.push(' * @param ' + pName + ' ' + (paramDoc[pName] || pName));
        }

    }

    lines.push(' * @returns An smart contract wrapper for the deployed contract');
    lines.push(' */');

    lines.push('public static async deploy(' + params.join(", ") + '): Promise<' + className + '> {');
    lines.push('    const deployed = await deploySmartContract(bytecode, CONTRACT_ABI, [' + getCallArgumentsList(entry) + '], ' + (entry.payable ? "value" : "0") + ', options);');
    lines.push('    if (deployed.receipt.status > BigInt(0)) {');
    lines.push('        return new ' + className + '(deployed.result, options);');
    lines.push('    } else {');
    lines.push('        throw new Error("Transaction reverted");');
    lines.push('    }');
    lines.push('}');

    lines.push('');

    result.imports["getTxBuildDetailsForDeploy"] = true;

    const txDetailsGetParams = params.slice(0, params.length - 1);

    lines.push('/**');

    lines.push(' * Gets transaction details to deploy an smart contract');

    for (let p of txDetailsGetParams) {
        let pName = p.split(":")[0];
        switch (pName) {
            case 'value':
                if (entry.payable) {
                    lines.push(' * @param value The transaction value');
                } else {
                    lines.push(' * @param value ' + (paramDoc[pName] || pName));
                }
                break;
            case 'bytecode':
                lines.push(' * @param bytecode The smart contract bytecode');
                break;
            default:
                lines.push(' * @param ' + pName + ' ' + (paramDoc[pName] || pName));
        }

    }

    lines.push(' * @returns An smart contract wrapper for the deployed contract');
    lines.push(' */');

    lines.push('public static getDeployTxBuildDetails(' + txDetailsGetParams.join(", ") + '): TransactionBuildDetails {');
    lines.push('    return getTxBuildDetailsForDeploy(bytecode, CONTRACT_ABI, [' + getCallArgumentsList(entry) + '], ' + (entry.payable ? "value" : "0") + ');');
    lines.push('}');

    return lines.map(function (l) {
        return tabSpaces + l;
    }).join("\n");
}

function makeFunctionParams(inputs, result) {
    return inputs.map(function (i, j) {
        return (i.name || ("param_" + j)) + ": " + getABITypescriptType(i.type, result, true);
    });
}

function getCallArgumentsList(entry) {
    return entry.inputs.map(function (i, j) { return i.name || "param_" + j; }).join(", ");
}

function getABITypescriptType(abiType, result, isInput) {
    abiType = abiType + "";
    let matchArray = (/\[([0-9]+)?\]$/).exec(abiType);
    let isArray;

    if (matchArray) {
        isArray = true;
        abiType = abiType.substr(0, abiType.length - matchArray[0].length);
    } else {
        isArray = false;
    }

    if (abiType === "address") {
        if (isInput) {
            result.imports["AddressLike"] = true;
            return "AddressLike" + (isArray ? "[]" : "");
        } else {
            result.imports["Address"] = true;
            return "Address" + (isArray ? "[]" : "");
        }
    } else if (abiType === "string") {
        return "string" + (isArray ? "[]" : "");
    } else if (abiType === "bool") {
        return "boolean" + (isArray ? "[]" : "");
    } else if ((/^(u)?int([0-9]+)?$/).test(abiType)) {
        if (isInput) {
            result.imports["QuantityLike"] = true;
            return "QuantityLike" + (isArray ? "[]" : "");
        } else {
            result.imports["Quantity"] = true;
            return "Quantity" + (isArray ? "[]" : "");
        }
    } else if ((/^bytes([0-9]+)?$/).test(abiType)) {
        if (isInput) {
            result.imports["BytesLike"] = true;
            return "BytesLike" + (isArray ? "[]" : "");
        } else {
            return "string" + (isArray ? "[]" : "");
        }
    } else if ((/^\(.*\)$/).test(abiType)) {
        // Tuple
        let innerText = abiType.substr(1, abiType.length - 1);
        let tName = "";
        let openTupleCount = 0;

        let typeArray = [];

        for (let i = 0; i < innerText.length; i++) {
            let c = innerText.charAt(i);

            if (c === "(") {
                tName += c;
                openTupleCount++;
            } else if (c === ")") {
                tName += c;
                openTupleCount--;
            } else if (c === "," && openTupleCount === 0) {
                typeArray.push(tName);
                tName = "";
            } else {
                tName += c;
            }
        }

        if (tName) {
            typeArray.push(tName);
        }

        return "[" + typeArray.map(function (t) {
            return getABITypescriptType(t, result, isInput);
        }).join(", ") + "]";
    }
}

function makeFunctionResultType(outputs, outType, result) {
    if (outType === "void") {
        return "void";
    } else if (outType === "single") {
        return getABITypescriptType(outputs[0].type, result, false);
    } else if (outType === "tuple") {
        return "[" + outputs.map(function (o) {
            return getABITypescriptType(o.type, result, false);
        }).join(", ") + "]";
    } else if (outType === "struct") {
        return "{" + outputs.map(function (o) {
            return o.name + ": " + getABITypescriptType(o.type, result, false);
        }).join(", ") + "}";
    } else {
        return "any";
    }
}

function makeViewFunction(entry, result, tabSpaces, isOverloaded, overloadedMethodsIndex, docs) {
    let lines = [];

    const signature = entry.name + "(" + entry.inputs.map(i => i.type).join(",") + ")";

    let params = makeFunctionParams(entry.inputs, result);

    result.imports["MethodCallingOptions"] = true;
    params.push('options?: MethodCallingOptions');

    let outType;

    if (entry.outputs.length === 0) {
        outType = "void";
    } else if (entry.outputs.length === 1) {
        outType = "single";
    } else {
        outType = "struct";
        for (let i = 0; i < entry.outputs.length; i++) {
            if (!entry.outputs[i].name) {
                outType = "tuple";
                break;
            }
        }
    }

    let methodName = entry.name;

    if (isOverloaded) {
        methodName += "__" + overloadedMethodsIndex[entry.name];
        overloadedMethodsIndex[entry.name]++;
        result.imports["FunctionFragment"] = true;
    }

    const methodNotice = (((docs.user.methods || Object.create(null))[signature] || Object.create(null)).notice || ("Method: " + signature)).split("\n");
    const methodParamsDoc = ((docs.dev.methods || Object.create(null))[signature] || Object.create(null)).params || Object.create(null);
    const methodReturnsDoc = ((docs.dev.methods || Object.create(null))[signature] || Object.create(null)).returns || Object.create(null);

    lines.push('/**');
    lines.push(' * Calls View method: ' + signature);
    for (let l of methodNotice) {
        lines.push(' * ' + l);
    }

    for (let p of params) {
        let pName = p.split(":")[0];
        switch (pName) {
            case 'options?':
                lines.push(' * @param options The options for sending the request');
                break;
            default:
                lines.push(' * @param ' + pName + ' ' + (methodParamsDoc[pName] || pName));
        }

    }

    if (Object.keys(methodReturnsDoc).length === 1 && methodReturnsDoc["_0"]) {
        lines.push(' * @returns ' + methodReturnsDoc["_0"]);
    } else if (Object.keys(methodReturnsDoc).length > 1) {
        for (let r of Object.keys(methodReturnsDoc)) {
            lines.push(' * @returns ' + r + ' ' + methodReturnsDoc[r]);
        }
    } else {
        lines.push(' * @returns The result for calling the method');
    }

    lines.push(' */');

    lines.push('public async ' + methodName + '(' + params.join(", ") + '): Promise<' + makeFunctionResultType(entry.outputs, outType, result) + '> {');

    lines.push('    ' + (outType === "void" ? "" : 'const __r: any = ') + 'await this._contractInterface.callViewMethod(' + sanitizeMethodEntry(entry, isOverloaded) + ', [' + getCallArgumentsList(entry) + '], options || {});');

    if (outType === "single") {
        lines.push('    return __r[0]');
    } else if (outType === "tuple") {
        lines.push('    return __r');
    } else if (outType === "struct") {
        lines.push('    return {');
        for (let i = 0; i < entry.outputs.length; i++) {
            let out = entry.outputs[i];
            lines.push('        ' + out.name + ': __r[' + i + ']' + ',');
        }
        lines.push('    };');
    }

    lines.push('}');

    return lines.map(function (l) {
        return tabSpaces + l;
    }).join("\n");
}

function makeTransactionFunction(entry, result, tabSpaces, className, isOverloaded, overloadedMethodsIndex, docs) {
    let lines = [];

    const signature = entry.name + "(" + entry.inputs.map(i => i.type).join(",") + ")";

    let resultName = className + "EventCollection";

    let params = makeFunctionParams(entry.inputs, result);

    if (entry.payable) {
        result.imports["QuantityLike"] = true;
        params.push('value: QuantityLike');
    }

    result.imports["MethodTransactionOptions"] = true;
    params.push('options: MethodTransactionOptions');

    result.imports["SmartContractEvent"] = true;
    result.imports["TransactionResult"] = true;

    let methodName = entry.name;

    if (isOverloaded) {
        methodName += "__" + overloadedMethodsIndex[entry.name];
        overloadedMethodsIndex[entry.name]++;
        result.imports["FunctionFragment"] = true;
    }

    const methodNotice = (((docs.user.methods || Object.create(null))[signature] || Object.create(null)).notice || ("Method: " + signature)).split("\n");
    const methodParamsDoc = ((docs.dev.methods || Object.create(null))[signature] || Object.create(null)).params || Object.create(null);

    lines.push('/**');

    lines.push(' * Calls Transaction method: ' + signature);
    for (let l of methodNotice) {
        lines.push(' * ' + l);
    }

    for (let p of params) {
        let pName = p.split(":")[0];
        switch (pName) {
            case 'value':
                if (entry.payable) {
                    lines.push(' * @param value The transaction value');
                } else {
                    lines.push(' * @param value ' + (methodParamsDoc[pName] || pName));
                }
                break;
            case 'options':
                lines.push(' * @param options The options for sending the transaction');
                break;
            default:
                lines.push(' * @param ' + pName + ' ' + (methodParamsDoc[pName] || pName));
        }
    }

    lines.push(' * @returns The transaction result');
    lines.push(' */');

    lines.push('public async ' + methodName + '(' + params.join(", ") + '): Promise<TransactionResult<' + resultName + '>> {');

    if (entry.payable) {
        lines.push('    const __r = await this._contractInterface.callPayableMethod(' + sanitizeMethodEntry(entry, isOverloaded) + ', [' + getCallArgumentsList(entry) + '], value, options);');
    } else {
        lines.push('    const __r = await this._contractInterface.callMutableMethod(' + sanitizeMethodEntry(entry, isOverloaded) + ', [' + getCallArgumentsList(entry) + '], options);');
    }

    lines.push('');

    lines.push('    if (__r.receipt.status > BigInt(0)) {');
    lines.push('        const decodedEvents = this._contractInterface.parseTransactionLogs(__r.receipt.logs)');
    lines.push('        return { receipt: __r.receipt, result: new ' + resultName + '(decodedEvents) };');
    lines.push('    } else {');
    lines.push('        throw new Error("Transaction reverted");');
    lines.push('    }');

    lines.push('}');

    lines.push('');

    lines.push('/**');

    lines.push(' * Gets details for building a transaction calling the method: ' + signature);
    for (let l of methodNotice) {
        lines.push(' * ' + l);
    }

    const txBuildDetailsParams = params.slice(0, params.length - 1);

    for (let p of txBuildDetailsParams) {
        let pName = p.split(":")[0];
        switch (pName) {
            case 'value':
                if (entry.payable) {
                    lines.push(' * @param value The transaction value');
                } else {
                    lines.push(' * @param value ' + (methodParamsDoc[pName] || pName));
                }
                break;
            default:
                lines.push(' * @param ' + pName + ' ' + (methodParamsDoc[pName] || pName));
        }
    }

    lines.push(' * @returns The details for building the transaction');
    lines.push(' */');

    lines.push('public ' + methodName + '$txBuildDetails(' + txBuildDetailsParams.join(", ") + '): TransactionBuildDetails {');

    if (entry.payable) {
        lines.push('    return this._contractInterface.encodePayableMethod(' + sanitizeMethodEntry(entry, isOverloaded) + ', [' + getCallArgumentsList(entry) + '], value);');
    } else {
        lines.push('    return this._contractInterface.encodeMutableMethod(' + sanitizeMethodEntry(entry, isOverloaded) + ', [' + getCallArgumentsList(entry) + ']);');
    }

    lines.push('}');

    return lines.map(function (l) {
        return tabSpaces + l;
    }).join("\n");
}

function makeEventStruct(entry, result, tabSpaces, docs) {
    let lines = [];

    const signature = entry.name + "(" + entry.inputs.map(i => i.type).join(",") + ")";

    lines.push('/**');
    lines.push(' * ' + (((docs.user.events || Object.create(null))[signature] || Object.create(null)).notice || ('Event: ' + signature)));
    lines.push(' */');
    lines.push('export interface ' + entry.name + 'Event {');

    for (let i = 0; i < entry.inputs.length; i++) {
        let out = entry.inputs[i];
        lines.push('    ' + (out.name || ("_" + i)) + ': ' + getABITypescriptType(out.type, result, false) + ",");
    }

    lines.push('}');

    return lines.map(function (l) {
        return tabSpaces + l;
    }).join("\n");
}

function makeEventFunc(entry, result, tabSpaces, docs) {
    let lines = [];

    result.imports["SmartContractEventWrapper"] = true;
    result.imports["SmartContractEvent"] = true;

    const signature = entry.name + "(" + entry.inputs.map(i => i.type).join(",") + ")";

    lines.push('/**');
    lines.push(' * Get an event of type ' + signature + ' from the collection');
    lines.push(' * ' + (((docs.user.events || Object.create(null))[signature] || Object.create(null)).notice || ('Event: ' + signature)));
    lines.push(' * @param index Event index in the collection (from 0 to length - 1)');
    lines.push(' * @returns The event object');
    lines.push(' */');

    lines.push('public get' + entry.name + 'Event(index: number): SmartContractEventWrapper<' + entry.name + 'Event> {');


    lines.push('    const __r: any = this.events[index].parameters;');
    lines.push('    return {');
    lines.push('        event: this.events[index],');
    lines.push('        data: {');

    for (let i = 0; i < entry.inputs.length; i++) {
        let out = entry.inputs[i];
        lines.push('            ' + out.name + ': __r[' + i + ']' + ',');
    }

    lines.push('        },');

    lines.push('    };');

    lines.push('}');

    return lines.map(function (l) {
        return tabSpaces + l;
    }).join("\n");
}

function sanitizeMethodEntry(entry, isOverloaded) {
    if (!isOverloaded) {
        return JSON.stringify(entry.name);
    }

    return "FunctionFragment.from(" + JSON.stringify(entry) + ")";
}

function toTypescriptFileName(contractName) {
    let res = "";
    let s = 0;

    for (let i = 0; i < contractName.length; i++) {
        let c = contractName.charAt(i);

        if (c === "_") {
            if (res) {
                res += "-";
            }
            s = 1;
        } else {
            let isBreaker = c.toLowerCase() !== c;

            if (isBreaker) {
                if (s === 0) {
                    if (res) {
                        res += "-";
                    }
                }

                s = 1;
            } else {
                s = 0;
            }

            res += c.toLowerCase();
        }
    }

    return res;
}

main();
